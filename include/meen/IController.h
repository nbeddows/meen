/*
Copyright (c) 2021-2025 Nicolas Beddows <nicolas.beddows@gmail.com>

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

#ifndef ICONTROLLER_H
#define ICONTROLLER_H

#include <array>
#include <cstdint>
#include <memory>

#include "meen/Base.h"

#ifdef _WINDOWS
#if meen_STATIC
#define DLL_EXP_IMP
#elif defined meen_EXPORTS
#define DLL_EXP_IMP __declspec(dllexport)
#else
#define DLL_EXP_IMP __declspec(dllimport)
#endif
#else
#ifdef meen_EXPORTS
#define DLL_EXP_IMP [[gnu::visibility("default")]]
#else
#define DLL_EXP_IMP
#endif
#endif

namespace meen
{
	/** Device interface

		An interface to a device that can interact with the cpu.
	*/
	struct IController
	{
		/** UUID

			A unique universal identifier for this controller.

			@return				The Uuid as a `std::array`.
		*/
		virtual std::array<uint8_t, 16> Uuid() const = 0;

		/** Read from a device

			Reads 8 bits from a device at the specifed 16 bit address.

			The implementation of the function should be lightweight and
			should never block. Blocking on this function will cause
			the cpu pipeline to stall, hence slowing down the emulated
			application.

			@param	address		The 16 bit address to read from.
			@param	controller	An optional controller that can be used for cross
								controller communication.

			@return				The 8 bits of data read from the device.
		*/
		virtual uint8_t Read(uint16_t address, IController* controller) = 0;

		/** Write to a device

			Write 8 bits of data to a device at the specified 16 bit address.

			The implementation of the function should be lightweight and
			should never block. Blocking on this function will cause
			the cpu pipeline to stall, hence slowing down the emulated
			application.

			@param	address		The 16 bit address to write to.
			@param	value		The 8 bit data value to write.
			@param	controller	An optional controller that can be used for cross
								controller communication.
		*/
		virtual void Write(uint16_t address, uint8_t value, IController* controller) = 0;

		/** Interrupt generator

			Query the device for any pending interrupts.

			@param	currTime	The time in nanoseconds of the machine clock.
			@param	cycles		The total number of cpu cycles that have elapsed.
			@param	controller	An optional controller that can be used for cross
								controller communication.

			@return				The interrupt service routine generated by the
								device.

			@remark				ISR::Quit exits the main control loop when returned from
								an io controller interrupt handler.
			@remark				The controller parameter is owned by the object that calls
								this method and should not be cached.

			@see				ISR
		*/
		virtual ISR GenerateInterrupt(uint64_t currTime, uint64_t cycles, IController* controller) = 0;

		/** Destroys the controller

			Release all resources used by this controller instance.
		*/
		virtual ~IController() = default;
	};

	/** Custom contoller deleter

		All custom controllers must have this deleter attached for machine compatibility.

		Since all machine controller attachments are via `std::unique_ptr`, this deleter allows
		for the skipping of the deleteing of the attached pointer. This can be useful if
		you are handling the memory via some other mechanism.

		This should not have to be directly referenced by the user, use the meen::IControllerPtr
		using directive instead.

		`auto p1 = IControllerPtr(myController)`: p1 takes ownership of myController and deletes it when its reference count hits 0.<br>
		`auto p2 = IControllerPtr(myController, ControllerDeleter(false))`: p2 takes ownership of myController and **DOES NOT** delete it when its reference count hits 0.
	*/
	struct ControllerDeleter
	{
	private:
		/**	Delete this controller

			True if this controller should be deleted, false otherwise.
		*/
		bool delete_{};
	public:
		/** Initialisation constructor

			@param	del		True if this controller should be deleted (default behaviour), false otherwise.

			@remark			The non default behaviour is used internally and should not be altered.
		*/
		DLL_EXP_IMP explicit ControllerDeleter(bool del = true);

		/** Operator function overload

			Invoked when this deleter is attached to a smart pointer and it's
			reference count hits 0.
		*/
		DLL_EXP_IMP void operator()(IController* controller);
	};

	/** Convenience using directive.

		Using this directive will guarantee machine compatibility when creating controllers.
	*/
	using IControllerPtr = std::unique_ptr<IController, ControllerDeleter>;
} // namespace meen

#endif // ICONTROLLER_H
